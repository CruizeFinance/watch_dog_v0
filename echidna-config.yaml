#select the mode to test, which can be property, assertion, overflow, exploration, optimization
testMode: "property"

#check if some contract was destructed or not
testDestruction: false

#psender is the sender for property transactions; by default intentionally
#the same as contract deployer
psender: "0x10000"

#prefix is the prefix for Boolean functions that are properties to be checked
prefix: "echidna_"

#propMaxGas defines gas cost at which a property fails
propMaxGas: 8000030

#testMaxGas is a gas limit; does not cause failure, but terminates sequence
testMaxGas: 8000030

#maxGasprice is the maximum gas price
maxGasprice: 0

#testLimit is the number of test sequences to run
testLimit: 20000

#stopOnFail makes echidna terminate as soon as any property fails and has been shrunk
stopOnFail: false

#estimateGas makes echidna perform analysis of maximum gas costs for functions (experimental)
estimateGas: false

#seqLen defines how many transactions are in a test sequence
seqLen: 50

#shrinkLimit determines how much effort is spent shrinking failing sequences
shrinkLimit: 5000

#coverage controls coverage guided testing
coverage: true

#format can be "text" or "json" for different output (human or machine readable)
format: "text"

#deployer is address of the contract deployer (who often is privileged owner, etc.)
deployer: "0x41414141"

#sender is set of addresses transactions may originate from
sender: ["0x10000", "0x20000", "0x30000"]

# maximum value to send to payable functions
maxValue: 100000000000000000000 # 100 eth

#cryticArgs allows special args to crytic
cryticArgs: ["--compile-force-framework", "hardhat"]

checkAsserts: true

maxTimeDelay: 604800